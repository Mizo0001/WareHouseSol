@page "/categories"
@attribute [Authorize]
@inject ICategoryService CategoryService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Authorization
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using System.Security.Claims
@using System.Collections.Generic
@using System.Threading.Tasks

<h3>Categories</h3>


<AuthorizeView>
    <Authorized>
        <SfGrid DataSource="@categories" ID="Grid" @ref="DefaultGrid" Toolbar="@(new List<string>() { "Add", "Edit", "Cancel", "Update","ExcelExport" })" AllowExcelExport="true" TValue="Categories">
            <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Normal"></GridEditSettings>
            <GridEvents TValue="Categories" OnToolbarClick="ToolbarClickHandler" OnActionBegin="@(ActionBeginHandler)" OnActionComplete="@(ActionCompleteHandler)"></GridEvents>
            <GridColumns>
                <GridColumn Field="@nameof(Categories.CategoryId)" HeaderText="Category ID" IsPrimaryKey="true" ValidationRules="@(new ValidationRules { Required = true })" TextAlign="TextAlign.Center" Width="120" AllowAdding="false" AllowEditing="false"></GridColumn>
                <GridColumn Field="@nameof(Categories.CategoryName)" HeaderText="Category Name" ValidationRules="@(new ValidationRules { Required = true })" Width="150"></GridColumn>
                <GridColumn Field="@nameof(Categories.Active)" HeaderText="Active" Type="ColumnType.Boolean" DisplayAsCheckBox="true" Width="100"></GridColumn>
                <GridColumn Field="@nameof(Categories.InActiveDate)" HeaderText="Inactive Date" Type="ColumnType.Date" Format="yyyy-MM-dd" Width="150" AllowAdding="false" AllowEditing="false"></GridColumn>
                <GridColumn Field="@nameof(Categories.CreateBy)" HeaderText="Create By" Width="150" AllowAdding="false" AllowEditing="false"></GridColumn>
                <GridColumn Field="@nameof(Categories.CreateDate)" HeaderText="Create Date" Type="ColumnType.Date" Format="yyyy-MM-dd" Width="150" AllowAdding="false" AllowEditing="false"></GridColumn>
                <GridColumn Field="@nameof(Categories.UpdateBy)" HeaderText="Update By" Width="150" AllowAdding="false" AllowEditing="false"></GridColumn>
                <GridColumn Field="@nameof(Categories.UpdateDate)" HeaderText="Update Date" Type="ColumnType.Date" Format="yyyy-MM-dd" Width="150" AllowAdding="false" AllowEditing="false"></GridColumn>
            </GridColumns>
        </SfGrid>
    </Authorized>
    <NotAuthorized>
        <p>You must be logged in to access this page.</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    private IEnumerable<Categories> categories;
    private ClaimsPrincipal user;
    private SfGrid<Categories> DefaultGrid;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        await LoadCategories();
    }
    
    private async Task LoadCategories()
    {
        categories = await CategoryService.GetAllCategoriesAsync();
    }

    public void ActionBeginHandler(ActionEventArgs<Categories> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            var username = user?.Identity?.Name ?? "Unknown";
            if (Args.Action == "Add")
            {
                Args.Data.CreateBy = username;
                CategoryService.InsertCategoryAsync(Args.Data);
            }
            else if (Args.Action == "Edit")
            {
                Args.Data.UpdateBy = username;
                CategoryService.UpdateCategoryAsync(Args.Data);
            }
        }
    }

    public async void ActionCompleteHandler(ActionEventArgs<Categories> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            await LoadCategories(); 
            StateHasChanged(); 
        }
    }
    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport") //Id is combination of Grid's ID and itemname
        {
            await this.DefaultGrid.ExcelExport();
        }
    }
}
