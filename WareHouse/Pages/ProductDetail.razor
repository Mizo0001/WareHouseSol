 @page "/productdetails"
    @inject IProductDetailsService ProductDetailsService
    @inject IProductService ProductService
    @inject IWareHouseService WareHouseService
    @inject AuthenticationStateProvider AuthenticationStateProvider
    @using Microsoft.AspNetCore.Components.Authorization
    @using Syncfusion.Blazor.Grids
    @using Syncfusion.Blazor.Inputs
    @using System.Security.Claims
    @using System.Collections.Generic
    @using System.Threading.Tasks
<!-- Header Section -->
<div style="text-align: center; margin-bottom: 20px;">
    <h3>Product Details</h3>
</div>

<AuthorizeView>
    <Authorized>
        @if (products != null)
        {
            <!-- Grid Section -->
            <div class="container">
                <SfGrid DataSource="@productdetails" ID="Grid" @ref="DefaultGrid" AllowFiltering="true" AllowExcelExport="true" TValue="ProductDetails" Width="100%">
                    <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Normal"></GridEditSettings>
                    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                    <GridEvents TValue="ProductDetails" OnToolbarClick="ToolbarClickHandler" OnActionBegin="@(ActionBeginHandler)" OnActionComplete="@(ActionCompleteHandler)"></GridEvents>
                    <GridColumns>
                        <GridColumn Field="@nameof(ProductDetails.DetailID)" HeaderText="Detail ID" IsPrimaryKey="true" AllowFiltering="false" ValidationRules="@(new ValidationRules { Required = true })" TextAlign="TextAlign.Center" Width="120" AllowAdding="false" AllowEditing="false"></GridColumn>
                        <GridForeignColumn Field="@nameof(ProductDetails.ProductId)" HeaderText="ProductName" ForeignKeyValue="ProductName" ForeignDataSource="@activeProducts" Width="150"></GridForeignColumn>
                        <GridForeignColumn Field="@nameof(ProductDetails.WarehouseId)" HeaderText="Warehouse" ForeignKeyValue="WarehouseName" AllowFiltering="false" ForeignDataSource="@activewareHouses" Width="150"></GridForeignColumn>
                        <GridColumn Field="@nameof(ProductDetails.ExpiryDate)" HeaderText="Expiry Date" AllowFiltering="false" Type="ColumnType.DateTime" Format="yyyy-MM-dd" Width="150" AllowAdding="true" AllowEditing="false"></GridColumn>
                        <GridColumn Field="@nameof(ProductDetails.Balance)" HeaderText="Balance" ValidationRules="@(new ValidationRules { Required = true })" TextAlign="TextAlign.Center" Width="150" AllowFiltering="false" AllowEditing="false"></GridColumn>
                        <GridColumn Field="@nameof(ProductDetails.CreateBy)" HeaderText="Create By" AllowFiltering="false" Width="150" AllowEditing="false" AllowAdding="false"></GridColumn>
                        <GridColumn Field="@nameof(ProductDetails.CreateDate)" HeaderText="Create Date" Visible="false" AllowFiltering="false" Width="150" Format="yyyy-MM-dd" AllowEditing="false" AllowAdding="false"></GridColumn>
                        <GridColumn Field="@nameof(ProductDetails.UpdateBy)" HeaderText="Update By" Width="150" AllowFiltering="false" AllowEditing="false" AllowAdding="false"></GridColumn>
                        <GridColumn Field="@nameof(ProductDetails.UpdateDate)" HeaderText="Update Date" Width="150" AllowFiltering="false" Format="yyyy-MM-dd" AllowEditing="false" AllowAdding="false"></GridColumn>
                    </GridColumns>
                </SfGrid>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <p>You must be logged in to access this page.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private IEnumerable<ProductDetails> productdetails;
    private IEnumerable<Products> products;
    private IEnumerable<Products> activeProducts;
    private IEnumerable<WareHouses> wareHouses;
    private IEnumerable<WareHouses> activewareHouses;
    private ClaimsPrincipal user;
    private SfGrid<ProductDetails> DefaultGrid;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        await LoadProductDetails();
        await LoadProducts();
        await LoadWarehouses();
    }
    private async Task LoadProductDetails()
    {
        productdetails = await ProductDetailsService.GetAllProductDetailsAsync();
    }
    private async Task LoadProducts()
    {
        products = await ProductService.GetAllProductsAsync();
        activeProducts = products.Where(c => c.Active).ToList();
    }

    private async Task LoadWarehouses()
    {
        wareHouses = await WareHouseService.GetAllWareHousesAsync();
        activewareHouses = wareHouses.Where(c => c.Active).ToList();
    }
    public void ActionBeginHandler(ActionEventArgs<ProductDetails> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            var username = user?.Identity?.Name ?? "Unknown";
            if (Args.Action == "Add")
            {
                Args.Data.CreateBy = username;
                ProductDetailsService.InsertProductDetailsAsync(Args.Data);
            }
        }
    }

    public async void ActionCompleteHandler(ActionEventArgs<ProductDetails> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            await LoadProductDetails();
            StateHasChanged();
        }
    }
    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport") //Id is combination of Grid's ID and itemname
        {
            await this.DefaultGrid.ExcelExport();
        }
    }
}