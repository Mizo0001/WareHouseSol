@page "/transactiontypes"
@inject ITransactionTypeService TransactionTypeService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Authorization
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using System.Security.Claims
@using System.Collections.Generic
@using System.Threading.Tasks
<h3>TransactionType</h3>


<AuthorizeView>
    <Authorized>
        <SfGrid DataSource="@transactiontypes" ID="Grid" @ref="DefaultGrid" Toolbar="@(new List<string>() { "ExcelExport" })" AllowExcelExport="true" TValue="TransactionTypes">
            <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Normal"></GridEditSettings>
            <GridEvents TValue="TransactionTypeService" OnToolbarClick="ToolbarClickHandler" ></GridEvents>

            <GridColumns>
                <GridColumn Field="@nameof(TransactionTypes.TransactionTypeID)" HeaderText="TransactionTypeID ID" IsPrimaryKey="true" ValidationRules="@(new ValidationRules { Required = true })" TextAlign="TextAlign.Center" Width="120" AllowAdding="false" AllowEditing="false"></GridColumn>
                <GridColumn Field="@nameof(TransactionTypes.TypeName)" HeaderText="Type Name" ValidationRules="@(new ValidationRules { Required = true })" Width="150" AllowAdding="false" AllowEditing="false"></GridColumn>
                <GridColumn Field="@nameof(TransactionTypes.Change)" HeaderText="Change"  ValidationRules="@(new ValidationRules { Required = true })" TextAlign="TextAlign.Center" Width="120" AllowAdding="false" AllowEditing="false"></GridColumn>
            </GridColumns>
        </SfGrid>
    </Authorized>
    <NotAuthorized>
        <p>You must be logged in to access this page.</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    private IEnumerable<TransactionTypes> transactiontypes;
    private ClaimsPrincipal user;
    private SfGrid<TransactionTypes> DefaultGrid;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        await LoadTransactionTypes();
    }

    private async Task LoadTransactionTypes()
    {
        transactiontypes = await TransactionTypeService.GetAllTransactionTypeAsync();
    }
    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport") //Id is combination of Grid's ID and itemname
        {
            await this.DefaultGrid.ExcelExport();
        }
    }
}
